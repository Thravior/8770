import numpy as np
import math
from numpy.linalg import norm
from Katna.video import Video
import Katna.writer as kw
import cv2


def CalcSimCos(base:np.ndarray, ref:np.ndarray):
  local_b = base.flatten()
  local_r = ref.flatten()
  return (np.dot(local_b,local_r)/norm(local_r))


# ParamÃªtres:
TailleBinIntensite = 8
def CalculHisto(image: np.array):
  image.astype('uint8')

  hist = cv2.calcHist([image], [0, 1, 2], None, [256//TailleBinIntensite,256//TailleBinIntensite,256//TailleBinIntensite], [0, 256, 0, 256, 0, 256])
  return hist/hist.sum()


class DataWriter(kw.Writer):
  """Custom writer to print the data
  """
  DataList = []
    

  def write(self, filepath, data):
    """The write method to process data generated by Katna Library
    """
    Histo = []
    for image in data:
      Histo.append(CalculHisto(image))
    # Retirer histogrammes trop similaire ???
    DataWriter.DataList.append((filepath.split('\\')[-1],Histo))
  
if __name__ == '__main__':
  image_path = "TP3\moodle\data\jpeg\i000.jpeg"
  Vd = Video()
  writer = DataWriter()
  for i in range(1,101):
    video_path = "TP3\moodle\data\mp4\\v" + str(i).zfill(3) + ( ".mp4")
    video = cv2.VideoCapture(video_path)
    fps = video.get(cv2.CAP_PROP_FPS)
    frames = video.get(cv2.CAP_PROP_FRAME_COUNT)
    desiredFrames = int(max(1,frames//(3*fps))) 
    print("TP3\moodle\data\mp4\\v" + str(i).zfill(3) + ( ".mp4"))
    print(desiredFrames)
    Vd.extract_video_keyframes(desiredFrames,video_path,writer)

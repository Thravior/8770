1.
	a) assumant que l'on cherche l'image, si elle vient d'une vidéo, est la trame exacte, 100% ou 0% selon que l'on prend en compte les pertes et donc changements du au passage à un format d'image avec une compression avec perte

	b) 423MO (4 * 10^8 O)

	c) L*H (image) * f(image/s) * d(durée en s) * c(information en octet par pixel) * n(nbr image)
	en log base 10: L*H= 5.96(720X1280) f= 1.45(en moyenne en peu moins de 30 images/s) d= 1.18(moyenne env. 15s) c= 0.48(3 canaux pour couleur)  n= 2 (100 videos) => environ 10^11 

	d) tx compression jpeg ????

	e) compression ...



2.
	Encodage image:
		- Sélection Statique	(x/sec)			1/sec ; 3/sec
	Paramêtres histogrammes:
		- Espace de couleur:
			- RGB																		X
			- YUV	(X) (plus de calculs --int)				X
		- Dimension:
			- 3D	(256/intervals ^ 3)					intervals 64 double (1 pour 0-interval, 1 pour interval/2 a 1+ interval/2)

	Mesure:
		- Distance Manhattan		se fait simplement par operation numpy (add, abs)
		- Similarité cosinus 		se fait simplement par operation numpy (norm, mult)

	taille de la matrice:
		100 (vidéo) * |1/3| (image /seconde) * 15 (seconde /video) * (4^3 * 2) (bin histogrammes / image) * 4 (octet par bin)
			en log base 10: 2 + 1.18 + 2.1 + 0.6 = environ 6